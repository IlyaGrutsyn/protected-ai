import paramiko
import re
from langchain_core.messages import HumanMessage, SystemMessage
from langchain_community.chat_models.gigachat import GigaChat
from auth import BASIC_AUTHORIZATION_KEY
import getpass

# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ GigaChat
llm = GigaChat(
    credentials=BASIC_AUTHORIZATION_KEY,
    scope="GIGACHAT_API_PERS",
    model="GigaChat",
    verify_ssl_certs=False,
    streaming=False,
)

messages = [
    SystemMessage(content="–¢—ã –≤ —Ä–æ–ª–∏ –∑–∞—â–∏—Ç–Ω–∏–∫–∞ –≤–µ–±-—Å–µ—Ä–≤–∏—Å–∞ –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.")
]

# –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –∏ –ø–∞–∫–µ—Ç–æ–≤
TECH_TO_PACKAGE = {
    "SSL": "openssl",
    "TLS": "openssl",
    "–∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è": "libpam-google-authenticator",
    "–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è": "libpam-google-authenticator",
    "–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ": "rsyslog",
    "SQL –∏–Ω—ä–µ–∫—Ü–∏–∏": "sqlite3",
    "XSS": "modsecurity-crs",
    "DDoS": "fail2ban",
    "CDN": "dnsutils",
    "–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ": "unattended-upgrades",
    "–ø–∞—Ç—á–∏–Ω–≥": "apt",
    "–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π": "apparmor",
    "—Ä–µ–∞–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –∏–Ω—Ü–∏–¥–µ–Ω—Ç—ã": "logwatch",
    "–ø–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã": "sqlite3",
    "—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö": "modsecurity"
}


def get_security_recommendations():
    user_input = "–ö–∞–∫–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã –¥–ª—è –∑–∞—â–∏—Ç—ã –¥–∞–Ω–Ω–æ–≥–æ –≤–µ–±-—Å–µ—Ä–≤–∏—Å–∞?"
    messages.append(HumanMessage(content=user_input))
    response = llm.invoke(messages)
    messages.append(response)
    return response.content


def extract_technologies(recommendations):
    found_technologies = []
    for keyword in TECH_TO_PACKAGE.keys():
        if re.search(rf"\b{keyword}\b", recommendations, re.IGNORECASE):
            found_technologies.append(keyword)
    return found_technologies


def run_command(ssh, command, password):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É —á–µ—Ä–µ–∑ SSH —Å –ø—Ä–∞–≤–∞–º–∏ sudo, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—ã–≤–æ–¥ –∏ –æ—à–∏–±–∫–∏."""
    stdin, stdout, stderr = ssh.exec_command(f"echo {password} | sudo -S {command}")
    output = stdout.read().decode().strip()
    error = stderr.read().decode().strip()
    return output, error


def prepare_system(ssh, password):
    print("\nüîÑ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã...")
    commands = [
        "sudo killall apt apt-get dpkg 2>/dev/null",  # –ó–∞–≤–µ—Ä—à–∞–µ–º –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å apt/dpkg
        "sudo rm -rf /var/lib/dpkg/lock-frontend /var/cache/apt/archives/lock /var/lib/apt/lists/lock",  # –£–¥–∞–ª—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        "sudo dpkg --configure -a",  # –ó–∞–≤–µ—Ä—à–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –æ—Å—Ç–∞–ª–æ—Å—å
        "sudo apt-get update"  # –û–±–Ω–æ–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º—É
    ]
    
    for command in commands:
        output, error = run_command(ssh, command, password)
        if error:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã '{command}': {error}")
        else:
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {command}")


def check_sudo(ssh, password):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –ø—Ä–∞–≤–∞ sudo —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    output, error = run_command(ssh, "sudo -n true", password)
    if "password is required" in error.lower():
        print("‚ùå –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ sudo –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã.")
        return False
    return True


def package_exists(ssh, package, password):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ –ø–∞–∫–µ—Ç –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è—Ö."""
    output, error = run_command(ssh, f"apt-cache policy {package}", password)
    if "Installed: (none)" in output or "Candidate: (none)" in output:
        return False
    return True


def install_technologies_over_ssh(ip, username, password, technologies):
    """–ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É –ø–æ SSH, –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–∏—Å—Ç–µ–º—É –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏."""
    installed_technologies = []
    failed_technologies = []

    ssh = paramiko.SSHClient()
    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())

    try:
        ssh.connect(ip, username=username, password=password)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return installed_technologies, failed_technologies

    if not check_sudo(ssh, password):
        print("üîí –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ sudo.")
        return installed_technologies, failed_technologies

    print("\nüîÑ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã...")
    prepare_system(ssh, password)

    print("\nüì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π:")
    for tech in technologies:
        package = TECH_TO_PACKAGE.get(tech)
        if not package:
            print(f"‚ö†Ô∏è –ü–∞–∫–µ—Ç –¥–ª—è '{tech}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            failed_technologies.append(tech)
            continue

        if not package_exists(ssh, package, password):
            print(f"‚ö†Ô∏è –ü–∞–∫–µ—Ç '{package}' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è—Ö.")
            failed_technologies.append(tech)
            continue

        print(f"‚¨áÔ∏è –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é '{tech}' ({package})...")
        install_output, install_error = run_command(
            ssh, f"DEBIAN_FRONTEND=noninteractive apt-get install -y {package}", password
        )

        if install_error:
            print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ {package}: {install_error}")
            failed_technologies.append(tech)
        else:
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {package}")
            if package not in installed_technologies:
                installed_technologies.append(package)

    ssh.close()
    return installed_technologies, failed_technologies


def log_results(installed, failed):
    with open("install_log.txt", "w", encoding="utf-8") as log_file:
        log_file.write("–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:\n")
        log_file.write(", ".join(installed) + "\n\n")
        log_file.write("–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å:\n")
        for tech in failed:
            reason = "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è—Ö" if tech in TECH_TO_PACKAGE.values() else "–¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞"
            log_file.write(f"{tech}: {reason}\n")
    print("–û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ install_log.txt")


def main():
    # –®–∞–≥ 1: –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç GigaChat
    recommendations = get_security_recommendations()
    print("\n–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:\n", recommendations)

    # –®–∞–≥ 2: –í—ã–¥–µ–ª–∏—Ç—å —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏
    technologies = extract_technologies(recommendations)
    if not technologies:
        print("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏. –ó–∞–≤–µ—Ä—à–∞—é.")
        return

    print("\n–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏ –∏—Ö –ø–∞–∫–µ—Ç—ã:")
    for tech in technologies:
        package = TECH_TO_PACKAGE.get(tech, "–ù–µ –Ω–∞–π–¥–µ–Ω–æ")
        print(f" - {tech}: {package}")

    # –®–∞–≥ 3: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —á–µ—Ä–µ–∑ SSH
    ip = input("\n–í–≤–µ–¥–∏—Ç–µ IP-–∞–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞: ")
    username = input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ")
    password = getpass.getpass("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å: ")

    installed, failed = install_technologies_over_ssh(ip, username, password, technologies)

    # –®–∞–≥ 4: –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ—Ç—á–µ—Ç
    log_results(installed, failed)

    print("\nüìÑ –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á—ë—Ç:")
    print(f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–∞–∫–µ—Ç—ã: {', '.join(installed) if installed else '–ù–µ—Ç'}")
    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å: {', '.join(failed) if failed else '–ù–µ—Ç'}")
    print("\n–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ install_log.txt.")


if __name__ == "__main__":
    main()