import paramiko
import time
import re
from langchain_core.messages import HumanMessage, SystemMessage
from langchain_community.chat_models.gigachat import GigaChat
from auth import BASIC_AUTHORIZATION_KEY
from paramiko.ssh_exception import AuthenticationException
from flask import Flask, render_template, request

# Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = Flask(__name__)

# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ GigaChat
llm = GigaChat(
    credentials=BASIC_AUTHORIZATION_KEY,
    scope="GIGACHAT_API_PERS",
    model="GigaChat",
    verify_ssl_certs=False,
    streaming=False,
)

# –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –∏ –ø–∞–∫–µ—Ç–æ–≤
TECH_TO_PACKAGE = {
    "SSL": "openssl",
    "TLS": "openssl",
    "–∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è": "libpam-google-authenticator",
    "–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è": "libpam-google-authenticator",
    "–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ": "rsyslog",
    "SQL –∏–Ω—ä–µ–∫—Ü–∏–∏": "sqlite3",
    "XSS": "modsecurity-crs",
    "DDoS": "fail2ban",
    "CDN": "dnsutils",
    "–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ": "unattended-upgrades",
    "–ø–∞—Ç—á–∏–Ω–≥": "apt",
    "–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π": "apparmor",
    "—Ä–µ–∞–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –∏–Ω—Ü–∏–¥–µ–Ω—Ç—ã": "logwatch",
    "–ø–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã": "sqlite3",
    "—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö": "modsecurity"
}

def get_security_recommendations():
    user_input = "–ö–∞–∫–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã –¥–ª—è –∑–∞—â–∏—Ç—ã –¥–∞–Ω–Ω–æ–≥–æ –≤–µ–±-—Å–µ—Ä–≤–∏—Å–∞?"
    messages = [SystemMessage(content="–¢—ã –≤ —Ä–æ–ª–∏ –∑–∞—â–∏—Ç–Ω–∏–∫–∞ –≤–µ–±-—Å–µ—Ä–≤–∏—Å–∞ –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.")]
    messages.append(HumanMessage(content=user_input))
    response = llm.invoke(messages)
    messages.append(response)
    return response.content

def extract_technologies(recommendations):
    found_technologies = []

    for keyword in TECH_TO_PACKAGE.keys():
        if re.search(rf"\b{keyword}\b", recommendations, re.IGNORECASE):
            found_technologies.append(keyword)
    return found_technologies

def run_command(ssh, command, password):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É —á–µ—Ä–µ–∑ SSH —Å –ø—Ä–∞–≤–∞–º–∏ sudo, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—ã–≤–æ–¥ –∏ –æ—à–∏–±–∫–∏."""
    stdin, stdout, stderr = ssh.exec_command(f"echo {password} | sudo -S {command}")
    output = stdout.read().decode().strip()
    error = stderr.read().decode().strip()
    return output, error

def prepare_system(ssh, password):
    messages = []
    messages.append("üîÑ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã...")
    commands = [
        "sudo killall apt apt-get dpkg 2>/dev/null",  
        "sudo rm -rf /var/lib/dpkg/lock-frontend /var/cache/apt/archives/lock /var/lib/apt/lists/lock",  
        "sudo dpkg --configure -a",  
        "sudo apt-get update"  
    ]
    
    for command in commands:
        output, error = run_command(ssh, command, password)
        if error:
            messages.append(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã '{command}': {error}")
        else:
            messages.append(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {command}")
    return messages

def install_technologies_over_ssh(ip, username, password, technologies):
    """–ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É –ø–æ SSH, –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–∏—Å—Ç–µ–º—É –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏."""
    installed_technologies = []
    failed_technologies = []
    messages = []

    ssh = paramiko.SSHClient()
    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())

    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è —Å –Ω–µ–≤–µ—Ä–Ω—ã–º –ø–∞—Ä–æ–ª–µ–º –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        ssh.connect(ip, username=username, password=password)
        # –ï—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ, –≤—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        output, error = run_command(ssh, "echo –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏", password)
        if error:
            messages.append(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã 'echo –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏': {error}")
            return installed_technologies, failed_technologies, messages

        messages.append(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–æ —Å {username}@{ip}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –¥–µ–π—Å—Ç–≤–∏–µ–º
        time.sleep(2) 

    except AuthenticationException as e:
        messages.append(f"‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è {username}@{ip}")
        return installed_technologies, failed_technologies, messages
    except paramiko.SSHException as e:
        messages.append(f"‚ùå –û—à–∏–±–∫–∞ SSH-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
        return installed_technologies, failed_technologies, messages
    except Exception as e:
        messages.append(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return installed_technologies, failed_technologies, messages

    # –õ–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç—ã —Å —Å–∏—Å—Ç–µ–º–Ω—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π...
    for tech in technologies:
        package = TECH_TO_PACKAGE.get(tech)
        if not package:
            messages.append(f"‚ö†Ô∏è –ü–∞–∫–µ—Ç –¥–ª—è '{tech}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            failed_technologies.append(tech)
            continue

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–∞–∫–µ—Ç–∞
        output, error = run_command(ssh, f"apt-cache policy {package}", password)
        if "Installed: (none)" in output or "Candidate: (none)" in output:
            messages.append(f"‚ö†Ô∏è –ü–∞–∫–µ—Ç '{package}' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è—Ö.")
            failed_technologies.append(tech)
            continue

        messages.append(f"‚¨áÔ∏è –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é '{tech}' ({package})...")
        install_output, install_error = run_command(
            ssh, f"DEBIAN_FRONTEND=noninteractive apt-get install -y {package}", password
        )

        if install_error:
            messages.append(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ {package}: {install_error}")
            failed_technologies.append(tech)
        else:
            messages.append(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {package}")
            installed_technologies.append(tech)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –≤—ã–≤–æ–¥–∞–º–∏
        time.sleep(2)

    ssh.close()
    return installed_technologies, failed_technologies, messages


@app.route('/', methods=['GET'])
def index():
    return render_template('index.html')


@app.route('/run_script', methods=['POST'])
def run_script():
    ip = request.form['ip']
    username = request.form['username']
    password = request.form['password']

    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    recommendations = get_security_recommendations()

    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏
    technologies = extract_technologies(recommendations)

    if not technologies:
        return render_template('index.html', message="–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏.", messages=[])

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ —á–µ—Ä–µ–∑ SSH
    installed, failed, messages = install_technologies_over_ssh(ip, username, password, technologies)

    if not messages:
        messages = []  


    recommendations_list = []
    temp_s = ''
    index = 1  

    for i in range(len(recommendations)):
        if recommendations[i] in '1234567890' and recommendations[i + 1] == '.':
            if temp_s.strip(): 
                recommendations_list.append(f"{index}. {temp_s.strip()}")
                index += 1
            temp_s = ''
        else:
            temp_s += recommendations[i]

    # –î–æ–±–∞–≤–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    if temp_s.strip():
        recommendations_list.append(f"{index}. {temp_s.strip()}")   


    return render_template('index.html', messages=messages, recommendations=recommendations_list, installed=installed, failed=failed)



if __name__ == '__main__':
    app.run(debug=True)
